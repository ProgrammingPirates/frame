{
	"config": {},
	"scripts": [
		{
			"name": "Renderer",
			"source": [
				"const THREE = await import( './examples/js/libs/three.module.js' );",
				"",
				"var dom = resources.get( 'dom' );",
				"",
				"var renderer = new THREE.WebGLRenderer();",
				"renderer.autoClear = false;",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"renderer.setSize( dom.clientWidth, dom.clientHeight );",
				"dom.appendChild( renderer.domElement );",
				"",
				"window.addEventListener( 'resize', function () {",
				"\t",
				"\trenderer.setSize( dom.clientWidth, dom.clientHeight );",
				"\t",
				"} );",
				"",
				"resources.set( 'renderer', renderer );"
			]
		},
		{
			"name": "ShaderRenderer",
			"source": [
				"const THREE = await import( './examples/js/libs/three.module.js' );",
				"",
				"var SHADERS = {",
				"\t",
				"\t// by @mnstrmnch (remixed by @mrdoob)",
				"",
				"\tblobs: \"#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\nuniform vec2 resolution;\\nuniform float time;\\n\\nfloat f(vec3 o)\\n{\\n    float a=(sin(o.x)+o.y*.25)*2.35;\\n    // o=vec3(cos(time+a)*sin(time+o.x)*o.x-sin(time+a)*o.y,sin(a)*sin(time+o.y)*o.x+cos(time+a)*o.y,o.z);\\n    o=vec3(sin(time+a)*sin(o.x+o.z/3.0)*o.x,sin(time+a)*cos(o.y+o.z/2.0)*o.y,o.z);\\n    return dot(cos(o)*cos(o),vec3(1))-1.2;\\n}\\n\\nvec3 s(vec3 o,vec3 d)\\n{\\n    float t=0.0;\\n    float dt = 0.2;\\n    float nh = 0.0;\\n    float lh = 0.0;\\n    for(int i=0;i<50;i++)\\n    {\\n        nh = f(o+d*t);\\n        if(nh>0.0) { lh=nh; t+=dt; }\\n    }\\n\\n    if( nh > 0.0 ) return vec3(1.0,1.0,1.0);\\n\\n    t = t - dt*nh/(nh-lh);\\n\\n    vec3 e=vec3(-.1,.0,0.0);\\n    vec3 p=o+d*t;\\n    vec3 n=-normalize(vec3(f(p+e),f(p+e.yxy),f(p+e.yyx))+vec3((sin(p*75.)))*.001);\\n\\n    return vec3( mix( ((max(-dot(n,vec3(0.977)),0.) + 0.125*max(-dot(n,vec3(-.707,-.707,0)),0.)))*(mod\\n\\n(length(p.xy)*5.,2.)<1.0?vec3(1.0,1.,1.):vec3(.0,.0,.0))\\n                           ,vec3(1.0,1.0,1.5), vec3(pow(t/10.,1.5)) ) );\\n}\\n\\nvoid main()\\n{\\n    vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;\\n    gl_FragColor=vec4(s(vec3(0.0,0.0,time), normalize(vec3(p.xy,sin(time/5.0)*0.25+0.75))),1.0);\\n}\",",
				"\t",
				"\t// by @paulofalcao",
				"\t",
				"\tcubeballs: \"#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\nuniform vec2 resolution;\\nuniform float time;\\nuniform vec2 mouse;\\n\\n//Util Start\\nfloat PI=3.14159265;\\n\\nvec2 ObjUnion(\\n  in vec2 obj0,\\n  in vec2 obj1)\\n{\\n  if (obj0.x<obj1.x)\\n    return obj0;\\n  else\\n    return obj1;\\n}\\n\\nvec2 sim2d(\\n  in vec2 p,\\n  in float s)\\n{\\n   vec2 ret=p;\\n   ret=p+s/2.0;\\n   ret=fract(ret/s)*s-s/2.0;\\n   return ret;\\n}\\n\\nvec3 stepspace(\\n  in vec3 p,\\n  in float s)\\n{\\n  return p-mod(p-s/2.0,s);\\n}\\n\\nvec3 phong(\\n  in vec3 pt,\\n  in vec3 prp,\\n  in vec3 normal,\\n  in vec3 light,\\n  in vec3 color,\\n  in float spec,\\n  in vec3 ambLight)\\n{\\n   vec3 lightv=normalize(light-pt);\\n   float diffuse=dot(normal,lightv);\\n   vec3 refl=-reflect(lightv,normal);\\n   vec3 viewv=normalize(prp-pt);\\n   float specular=pow(max(dot(refl,viewv),0.0),spec);\\n   return (max(diffuse,0.0)+ambLight)*color+specular;\\n}\\n\\n//Util End\\n\\n//Scene Start\\n\\nvec2 obj(in vec3 p)\\n{ \\n  vec3 fp=stepspace(p,2.0);;\\n  float d=sin(fp.x*0.3+time*4.0)+cos(fp.z*0.3+time*2.0);\\n  p.y=p.y+d;\\n  p.xz=sim2d(p.xz,2.0);\\n  float c1=length(max(abs(p)-vec3(0.6,0.6,0.6),0.0))-0.35;\\n  float c2=length(p)-1.0;\\n  float cf=sin(time)*0.5+0.5;\\n  return vec2(mix(c1,c2,cf),1.0);\\n}\\n\\nvec3 obj_c(vec3 p){\\n  vec2 fp=sim2d(p.xz-1.0,4.0);\\n  if (fp.y>0.0) fp.x=-fp.x;\\n  if (fp.x>0.0) return vec3(0.0,0.0,0.0);\\n    else return vec3(1.0,1.0,1.0);   \\n}\\n\\n//Scene End\\n\\nfloat raymarching(\\n  in vec3 prp,\\n  in vec3 scp,\\n  in int maxite,\\n  in float precis,\\n  in float startf,\\n  in float maxd,\\n  out float objid)\\n{ \\n  const vec3 e=vec3(0.1,0,0.0);\\n  vec2 s=vec2(startf,0.0);\\n  vec3 c,p,n;\\n  float f=startf;\\n  for(int i=0;i<256;i++){\\n    if (abs(s.x)<precis||f>maxd||i>maxite) break;\\n    f+=s.x;\\n    p=prp+scp*f;\\n    s=obj(p);\\n    objid=s.y;\\n  }\\n  if (f>maxd) objid=-1.0;\\n  return f;\\n}\\n\\nvec3 camera(\\n  in vec3 prp,\\n  in vec3 vrp,\\n  in vec3 vuv,\\n  in float vpd)\\n{\\n  vec2 vPos=-1.0+2.0*gl_FragCoord.xy/resolution.xy;\\n  vec3 vpn=normalize(vrp-prp);\\n  vec3 u=normalize(cross(vuv,vpn));\\n  vec3 v=cross(vpn,u);\\n  vec3 scrCoord=prp+vpn*vpd+vPos.x*u*resolution.x/resolution.y+vPos.y*v;\\n  return normalize(scrCoord-prp);\\n}\\n\\nvec3 normal(in vec3 p)\\n{\\n  //tetrahedron normal\\n  const float n_er=0.01;\\n  float v1=obj(vec3(p.x+n_er,p.y-n_er,p.z-n_er)).x;\\n  float v2=obj(vec3(p.x-n_er,p.y-n_er,p.z+n_er)).x;\\n  float v3=obj(vec3(p.x-n_er,p.y+n_er,p.z-n_er)).x;\\n  float v4=obj(vec3(p.x+n_er,p.y+n_er,p.z+n_er)).x;\\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\\n}\\n\\nvec3 render(\\n  in vec3 prp,\\n  in vec3 scp,\\n  in int maxite,\\n  in float precis,\\n  in float startf,\\n  in float maxd,\\n  in vec3 background,\\n  in vec3 light,\\n  in float spec,\\n  in vec3 ambLight,\\n  out vec3 n,\\n  out vec3 p,\\n  out float f,\\n  out float objid)\\n{ \\n  objid=-1.0;\\n  f=raymarching(prp,scp,maxite,precis,startf,maxd,objid);\\n  if (objid>-0.5){\\n    p=prp+scp*f;\\n    vec3 c=obj_c(p);\\n    n=normal(p);\\n    vec3 cf=phong(p,prp,n,light,c,spec,ambLight);\\n    return vec3(cf);\\n  }\\n  f=maxd;\\n  return vec3(background); //background color\\n}\\n\\nvoid main(void){\\n \\n  //Camera animation\\n  vec3 vuv=vec3(0,1,0);\\n  vec3 vrp=vec3(time*4.0,0.0,0.0);\\n  float mx=mouse.x*PI*2.0;\\n  float my=mouse.y*PI/2.01; \\n  vec3 prp=vrp+vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*12.0; //Trackball style camera pos\\n  float vpd=1.5;\\n  vec3 light=prp+vec3(5.0,0,5.0);\\n  \\n  vec3 scp=camera(prp,vrp,vuv,vpd);\\n  vec3 n,p;\\n  float f,o;\\n  const float maxe=0.01;\\n  const float startf=0.1;\\n  const vec3 backc=vec3(0.0,0.0,0.0);\\n  const float spec=8.0;\\n  const vec3 ambi=vec3(0.1,0.1,0.1);\\n  \\n  vec3 c1=render(prp,scp,256,maxe,startf,60.0,backc,light,spec,ambi,n,p,f,o);\\n  c1=c1*max(1.0-f*.015,0.0);\\n  vec3 c2=backc;\\n  if (o>0.5){\\n    scp=reflect(scp,n);\\n    c2=render(p+scp*0.05,scp,32,maxe,startf,10.0,backc,light,spec,ambi,n,p,f,o);\\n  }\\n  c2=c2*max(1.0-f*.1,0.0);\\n  gl_FragColor=vec4(c1.xyz*0.75+c2.xyz*0.25,1.0);\\n  \\n}\",",
				"\t",
				"\tfield: \"#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nuniform vec2 resolution;\\nuniform float time;\\n\\n\\n\\n//Raymarching Distance Fields\\n//About http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm\\n//Also known as Sphere Tracing\\n//IQs sphere (http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm)\\n//some screwed up stuff, by gt\\n\\nvec2 obj1(in vec3 p)\\n{\\n  //obj repeating\\n  p.x=fract(p.x+0.5)-0.5;\\n  p.z=fract(p.z+0.5)-0.5;\\n  p.y=fract(p.y+0.5)-0.5;\\n\\n/*\\n  \\tfloat sdSphere( vec3 p, float s )\\n\\t\\t{\\n \\t \\treturn length(p)-s;\\n\\t\\t}\\n*/\\n     vec3 q = abs(p.xyz);\\n \\tvec2 b = vec2(max(q.z-.1,max(q.x+q.y*0.57735,q.y)-.05));\\n  vec2 s = vec2(length(p) - .25);\\n  return vec2(mix(b,s,.5));\\n }\\n\\n//sphere with simple solid color\\nvec3 obj1_c(in vec3 p)\\n{\\n\\treturn vec3(1.,1.,.9);\\n}\\n\\nvoid main(void)\\n{\\n  vec2 vPos=-1.0+2.0*gl_FragCoord.xy/resolution.xy;\\n\\n  //animate\\n  vec3 vuv=vec3(0,1,sin(time*0.1));//Change camere up vector here\\n  vec3 prp=vec3(sin(time*0.15)*2.0,sin(time*0.5)*2.0,cos(time*0.1)*8.0); //Change camera path position here\\n  vec3 vrp=vec3(0,0,1.); //Change camere view here\\n\\n\\n  //camera\\n  vec3 vpn=normalize(vrp-prp);\\n  vec3 u=normalize(cross(vuv,vpn));\\n  vec3 v=cross(vpn,u);\\n  vec3 vcv=(prp+vpn);\\n  vec3 scrCoord=vcv+vPos.x*u*resolution.x/resolution.y+vPos.y*v;\\n  vec3 scp=normalize(scrCoord-prp);\\n\\n  //Raymarching\\n  //refine edge w .01\\n  const vec3 e=vec3(0.01,0,0);\\n  vec2 s=vec2(0.01,0.0);\\n  vec3 c,p,n;\\n  \\n\\tfloat f=0.;\\n\\tfor(int i=0;i<256;i++)\\n\\t{\\n\\t\\tif (abs(s.x)<.01||f>64.) break;\\n\\t\\tf+=s.x;\\n\\t\\tp=prp+scp*f;\\n\\t\\ts=obj1(p);\\n\\t}\\n  \\n\\tif (f<64.)\\n\\t{\\n\\t\\tc=obj1_c(p);\\n    \\t\\tn=normalize(\\n\\t\\tvec3(s.x-obj1(p-e.xyy).x, s.x-obj1(p-e.yxy).x, s.x-obj1(p-e.yyx).x));\\n\\t\\tfloat b=dot(n,normalize(prp-p));\\n\\t\\tgl_FragColor=vec4((b*c+pow(b,32.))*(1.0-f*.04),1.);//simple phong LightPosition=CameraPosition\\n\\t}\\n\\t\\n  else gl_FragColor=vec4(0.,0.,0.,1.); //background color\\n}\",",
				"\t",
				"\t// by @paulofalcao",
				"\t",
				"\tlights: \"#ifdef GL_ES\\nprecision highp float;\\n#endif\\nuniform float time;\\nuniform vec2 mouse;\\nuniform vec2 resolution;\\n\\nfloat makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){\\n   float xx=x+sin(t*fx)*sx;\\n   float yy=y+cos(t*fy)*sy;\\n   return 1.0/sqrt(xx*xx+yy*yy);\\n}\\n\\nvoid main( void ) {\\n\\n   vec2 p=(gl_FragCoord.xy/resolution.x)*2.0-vec2(1.0,resolution.y/resolution.x);\\n\\n   p=p*1.5;\\n   \\n   float x=p.x;\\n   float y=p.y;\\n\\n   float a=\\n       makePoint(x,y,3.3,2.9,0.3,0.3,time);\\n   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,time);\\n   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,time);\\n   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,time);\\n   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,time);\\n   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,time);\\n   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,time);\\n   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,time);\\n   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,time);   \\n   \\n   float b=\\n       makePoint(x,y,1.2,1.9,0.3,0.3,time);\\n   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,time);\\n   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,time);\\n   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,time);\\n   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,time);\\n   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,time);\\n   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,time);\\n   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,time);\\n   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,time);\\n\\n   float c=\\n       makePoint(x,y,3.7,0.3,0.3,0.3,time);\\n   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,time);\\n   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,time);\\n   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,time);\\n   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,time);\\n   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,time);\\n   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,time);\\n   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,time);\\n   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,time);\\n   \\n   vec3 d=vec3(a,b,c)/32.0;\\n   \\n   gl_FragColor = vec4(d.x,d.y,d.z,1.0);\\n}\",",
				"\t",
				"\t// by @platosha",
				"\t",
				"\tplanedistort: \"#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nuniform float time;\\nuniform vec2 mouse;\\nuniform vec2 resolution;\\n\\n\\nconst float TAU = 6.2832;\\n\\nvoid main( void ) {\\n\\n\\tvec2 position = ( gl_FragCoord.xy / resolution.xy );\\n\\tvec2 p = -1.0 + 2.0 * position;\\n\\tp *= vec2( resolution.x/resolution.y, 1.0 );\\n\\t\\n\\tfloat alpha = -time * 0.13;\\n\\tfloat sinA = sin(alpha), cosA = cos(alpha);\\n\\tp = vec2(cosA*p.x+sinA*p.y, -sinA*p.x+cosA*p.y);\\n\\t\\n\\tvec2 q = p;\\n\\tvec2 dir = vec2( sin(time*0.19), cos(time*0.27) ) * 0.333;\\n\\tq = p + dir/pow(0.5, 0.6-dot(p-dir,p-dir));\\n\\t\\n\\tq = mix(q, p, sin(time*0.78));\\n\\t\\n\\tfloat zr = 1.0/length(q);\\n\\tfloat zp = 1.0/abs(q.y);\\n\\tfloat mc = sin(time*0.16)*.5 + .5;\\n\\tmc = smoothstep(0.0, 1.0, mc);\\n\\tmc = smoothstep(0.0, 1.0, mc);\\n\\tmc = smoothstep(0.0, 1.0, mc);\\n\\tmc = smoothstep(0.0, 1.0, mc);\\n\\tfloat z = mix(zr, zp, mc);\\n\\tfloat ur = 5.0*atan(q.x*sign(q.y), abs(q.y))/TAU + cos(0.2*z*TAU+time*1.37) * 1.2 * sin( time * 0.21 );\\n\\tfloat up = q.x*z;\\n\\tfloat u = mix(ur, up, mc);\\n\\tvec2 uv = vec2(u, (1.0+mc*2.0)*z);\\n\\t\\n\\tfloat mv = sin(time * 0.0);\\n\\tuv = mix(uv, q, 0.0);\\n\\t\\n\\tfloat color = 0.0;\\n\\tcolor = cos(uv.x*TAU) * cos(uv.y*TAU + time*7.7);\\n\\tcolor = pow(abs(cos(color*TAU)), 3.0);\\n\\t\\n\\tfloat color2 = 0.0;\\n\\tcolor2 = cos(uv.x*TAU*2.0);\\n\\tcolor2 -= 0.55;\\n\\t\\t\\n\\tfloat shadow = 1.0/(z*z);\\n\\tvec3 rc = vec3(0.9, 1.0, 0.8)*color +\\n\\t\\t  vec3(0.3, 0.7, 0.6)*color2;\\n\\trc *= shadow;\\n\\t\\n\\tgl_FragColor = vec4( rc, 2.0 );\\n\\n}\"",
				"",
				"};",
				"",
				"function ShaderRenderer( shader_name ){",
				"\t",
				"\tvar renderer = resources.get( 'renderer' );",
				"\t",
				"\tvar scene = new THREE.Scene();",
				"",
				"\tvar camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );",
				"",
				"\tvar uniforms = {",
				"\t\ttime: { type: \"f\", value: 1.0 },",
				"\t\tmouse: { type: \"v2\", value: new THREE.Vector2( 0.5, 0.5 ) },",
				"\t\tresolution: { type: \"v2\", value: new THREE.Vector2() }",
				"\t};",
				"",
				"\tvar geometry = new THREE.PlaneGeometry( 2, 2 );",
				"\tvar material = new THREE.ShaderMaterial( {",
				"\t\tuniforms: uniforms,",
				"\t\tvertexShader: 'void main() { gl_Position = vec4( position, 1.0 ); }',",
				"\t\tfragmentShader: SHADERS[ shader_name ]",
				"\t} );",
				"\t",
				"\t",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"\tscene.add( mesh );",
				"\t",
				"\t//",
				"\t",
				"\tthis.setMouse = function ( array ) {",
				"",
				"\t\tuniforms.mouse.value.fromArray( array );",
				"\t\treturn this;",
				"\t",
				"\t};",
				"\t",
				"\tthis.render = function ( time ) {",
				"\t\t",
				"\t\tuniforms.time.value = time;",
				"\t\tuniforms.resolution.value.set( ",
				"\t\t\trenderer.domElement.width, ",
				"\t\t\trenderer.domElement.height",
				"\t\t);",
				"",
				"\t\trenderer.render( scene, camera );",
				"\t\t",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"resources.set( 'ShaderRenderer', ShaderRenderer );",
				""
			]
		},
		{
			"name": "ImageRenderer",
			"source": [
				"const THREE = await import( './examples/js/libs/three.module.js' );",
				"",
				"var dom = resources.get( 'dom' );",
				"",
				"function ImageRenderer( url, width, height ) {",
				"\t",
				"\tvar renderer = resources.get( 'renderer' );",
				"",
				"\tvar scene = new THREE.Scene();",
				"",
				"\tvar camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );",
				"\t",
				"\tvar geometry = new THREE.PlaneGeometry( 1, 1 );",
				"\tvar material = new THREE.MeshBasicMaterial( {",
				"\t\tmap: new THREE.TextureLoader().load( url ),",
				"\t\tdepthTest: false,",
				"\t\tdepthWrite: false",
				"\t} );",
				"",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"\tscene.add( mesh );",
				"\t",
				"\t//",
				"\t",
				"\tthis.render = function () {",
				"",
				"\t\tvar element = renderer.domElement;",
				"",
				"\t\tmesh.scale.x = width / element.clientWidth;",
				"\t\tmesh.scale.y = height / element.clientHeight;",
				"",
				"\t\trenderer.render( scene, camera );",
				"\t",
				"\t};",
				"\t",
				"}",
				"",
				"resources.set( 'ImageRenderer', ImageRenderer );"
			]
		},
		{
			"name": "ColorRenderer",
			"source": [
				"const THREE = await import( './examples/js/libs/three.module.js' );",
				"",
				"function ColorRenderer( color ){",
				"\t",
				"\tvar renderer = resources.get( 'renderer' );",
				"\t",
				"\tvar scene = new THREE.Scene();",
				"",
				"\tvar camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );",
				"",
				"\tvar geometry = new THREE.PlaneGeometry( 2, 2 );",
				"\tvar material = new THREE.MeshBasicMaterial( {",
				"\t\tcolor: color,",
				"\t\tdepthTest: false,",
				"\t\tdepthWrite: false,",
				"\t\ttransparent: true",
				"\t} );",
				"\t",
				"\t",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"\tscene.add( mesh );",
				"\t",
				"\t//",
				"\t",
				"\tthis.render = function ( opacity ) {",
				"\t\t",
				"\t\t",
				"\t\tmaterial.opacity = opacity;",
				"\t\trenderer.render( scene, camera );",
				"\t\t",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"resources.set( 'ColorRenderer', ColorRenderer );"
			]
		}
	],
	"effects": [
		{
			"name": "Audio Player",
			"source": [
				"var audio = document.createElement( 'audio' );",
				"audio.src = './examples/files/lug00ber-bastion_amstel.mp3';",
				"",
				"function start(){",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tplayer.setAudio( null );",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		},
		{
			"name": "Lights",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'lights' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 10 );",
				"",
				"}"
			]
		},
		{
			"name": "CubeBalls 1",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'cubeballs' ).setMouse( [ 0.75, 0.75 ] );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 6 );",
				"",
				"}"
			]
		},
		{
			"name": "CubeBalls 2",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'cubeballs' ).setMouse( [ -0.75, 0.25 ] );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 6 );",
				"",
				"}"
			]
		},
		{
			"name": "PlaneDistort 1",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'planedistort' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 20 );",
				"",
				"}"
			]
		},
		{
			"name": "PlaneDistort 2",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'planedistort' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 20 + 450 );",
				"",
				"}"
			]
		},
		{
			"name": "Field 1",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'field' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 20 );",
				"",
				"}"
			]
		},
		{
			"name": "Field 2",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'field' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 20 + 450 );",
				"",
				"}"
			]
		},
		{
			"name": "Blobs",
			"source": [
				"var ShaderRenderer = resources.get( 'ShaderRenderer' );",
				"var shader = new ShaderRenderer( 'blobs' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshader.render( progress * 10 );",
				"",
				"}"
			]
		},
		{
			"name": "Black Fade Out",
			"source": [
				"var ColorRenderer = resources.get( 'ColorRenderer' );",
				"var color = new ColorRenderer( 0x000000 );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tcolor.render( 1 - progress );",
				"",
				"}"
			]
		},
		{
			"name": "White Fade Out",
			"source": [
				"var ColorRenderer = resources.get( 'ColorRenderer' );",
				"var color = new ColorRenderer( 0xffffff );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tcolor.render( 1 - progress );",
				"",
				"}"
			]
		},
		{
			"name": "Image",
			"source": [
				"var ImageRenderer = resources.get( 'ImageRenderer' );",
				"var image = new ImageRenderer( './examples/files/credits.png', 1024, 256 );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\timage.render();",
				"",
				"}"
			]
		}
	],
	"animations": [
		{
			"name": "",
			"start": 0,
			"end": 71,
			"layer": 0,
			"effectId": 0,
			"enabled": true
		},
		{
			"name": "Scene 1",
			"start": 0,
			"end": 14,
			"layer": 1,
			"effectId": 1,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 14,
			"layer": 2,
			"effectId": 9,
			"enabled": true
		},
		{
			"name": "Scene 2",
			"start": 14,
			"end": 21,
			"layer": 1,
			"effectId": 2,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 21,
			"end": 28,
			"layer": 1,
			"effectId": 3,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 28,
			"end": 35,
			"layer": 1,
			"effectId": 4,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 35,
			"end": 42,
			"layer": 1,
			"effectId": 5,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 35,
			"end": 37,
			"layer": 2,
			"effectId": 10,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 42,
			"end": 49,
			"layer": 1,
			"effectId": 6,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 42,
			"end": 44,
			"layer": 2,
			"effectId": 10,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 49,
			"end": 56,
			"layer": 1,
			"effectId": 7,
			"enabled": true
		},
		{
			"name": "",
			"start": 56,
			"end": 71,
			"layer": 1,
			"effectId": 8,
			"enabled": true
		},
		{
			"name": "",
			"start": 56,
			"end": 71,
			"layer": 2,
			"effectId": 11,
			"enabled": true
		},
		{
			"name": "",
			"start": 56,
			"end": 60,
			"layer": 3,
			"effectId": 10,
			"enabled": true
		}
	]
}
